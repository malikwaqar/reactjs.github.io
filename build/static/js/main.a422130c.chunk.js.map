{"version":3,"sources":["Person/Person.js","App.js","serviceWorker.js","index.js"],"names":["person","props","className","onClick","click","name","age","children","type","onChange","changed","value","App","state","persons","showPersons","switchNameHandler","newName","setState","togglePersonHandler","doesShow","nameChangedHandler","event","target","style","backgroundColor","font","border","padding","cursor","this","bind","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"2RAceA,G,YAVA,SAAEC,GACb,OACI,yBAAKC,UAAU,UACX,uBAAGC,QAASF,EAAMG,OAAlB,OAA8BH,EAAMI,KAApC,aAAoDJ,EAAMK,IAA1D,eACA,2BAAIL,EAAMM,UACV,2BAAOC,KAAK,OAAOC,SAAUR,EAAMS,QAASC,MAAOV,EAAMI,UCsEtDO,E,4MA1EbC,MAAQ,CACNC,QAAS,CACP,CAAET,KAAM,cAAeC,IAAK,IAC5B,CAAED,KAAM,cAAeC,IAAK,IAC5B,CAAED,KAAM,WAAYC,IAAK,KAG3BS,aAAa,G,EAGfC,kBAAoB,SAACC,GAGnB,EAAKC,SAAU,CACbJ,QAAS,CACP,CAAET,KAAMY,EAASX,IAAK,IACtB,CAAED,KAAM,OAAQC,IAAK,IACrB,CAAED,KAAM,YAAaC,IAAK,Q,EAKhCa,oBAAsB,WACpB,IAAMC,EAAW,EAAKP,MAAME,YAC5B,EAAKG,SAAS,CAACH,aAAcK,K,EAE/BC,mBAAqB,SAACC,GACpB,EAAKJ,SAAU,CACbJ,QAAS,CACP,CAAET,KAAM,MAAOC,IAAK,IACpB,CAAED,KAAMiB,EAAMC,OAAOZ,MAAOL,IAAK,IACjC,CAAED,KAAM,YAAaC,IAAK,Q,uDAc9B,OACE,yBAAKJ,UAAU,OACb,mDACA,sDACA,4BACEsB,MAbQ,CACZC,gBAAiB,QACjBC,KAAM,UACNC,OAAQ,iBACRC,QAAS,MACTC,OAAQ,WASJ1B,QAAS2B,KAAKX,qBAFhB,gBAI+B,IAA3BW,KAAKjB,MAAME,YACX,6BACF,kBAAC,EAAD,CACAV,KAAMyB,KAAKjB,MAAMC,QAAQ,GAAGT,KAC5BC,IAAKwB,KAAKjB,MAAMC,QAAQ,GAAGR,MAC3B,kBAAC,EAAD,CACED,KAAMyB,KAAKjB,MAAMC,QAAQ,GAAGT,KAC5BC,IAAKwB,KAAKjB,MAAMC,QAAQ,GAAGR,IAC3BF,MAAO0B,KAAKd,kBAAkBe,KAAKD,KAAM,QACzCpB,QAASoB,KAAKT,oBAJhB,sBAKA,kBAAC,EAAD,CACEhB,KAAMyB,KAAKjB,MAAMC,QAAQ,GAAGT,KAC5BC,IAAKwB,KAAKjB,MAAMC,QAAQ,GAAGR,OACpB,U,GAnED0B,aCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.a422130c.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport './Person.css';\r\n\r\nconst person = ( props ) => {\r\n    return (\r\n        <div className=\"Person\">\r\n            <p onClick={props.click}>I'm {props.name} and I am {props.age} years old!</p>\r\n            <p>{props.children}</p>\r\n            <input type=\"text\" onChange={props.changed} value={props.name} />\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default person;","import React, { Component } from 'react';\nimport './App.css';\nimport Person from './Person/Person';\n\nclass App extends Component {\n  state = {\n    persons: [\n      { name: 'Malik Waqar', age: 28 },\n      { name: 'Izwan Ahmad', age: 29 },\n      { name: 'Umar Ali', age: 26 }\n    ],\n    //otherState: 'some other value',\n    showPersons: false\n  }\n\n  switchNameHandler = (newName) => {\n    // console.log('Was clicked!');\n    // DON'T DO THIS: this.state.persons[0].name = 'Maximilian';\n    this.setState( {\n      persons: [\n        { name: newName, age: 28 },\n        { name: 'Manu', age: 29 },\n        { name: 'Stephanie', age: 27 }\n      ]\n    } )\n  }\n\n  togglePersonHandler = () => {\n    const doesShow = this.state.showPersons;\n    this.setState({showPersons: !doesShow});\n  }\n  nameChangedHandler = (event) => {\n    this.setState( {\n      persons: [\n        { name: 'Max', age: 28 },\n        { name: event.target.value, age: 29 },\n        { name: 'Stephanie', age: 26 }\n      ]\n    } )\n  }\n\n  render () {\n    const style = {\n      backgroundColor: 'white',\n      font: 'inherit',\n      border: '1px solid blue',\n      padding: '8px',\n      cursor: 'pointer'\n    };\n\n    return (\n      <div className=\"App\">\n        <h1>Hi, I'm a React App</h1>\n        <p>This is really working!</p>\n        <button \n          style={style}\n          onClick={this.togglePersonHandler}>Switch Name</button>\n          {\n            this.state.showPersons === true ?\n            <div>\n          <Person \n          name={this.state.persons[0].name} \n          age={this.state.persons[0].age} />\n          <Person \n            name={this.state.persons[1].name} \n            age={this.state.persons[1].age}\n            click={this.switchNameHandler.bind(this, 'Max!')}\n            changed={this.nameChangedHandler} >My Hobbies: Racing</Person>\n          <Person \n            name={this.state.persons[2].name} \n            age={this.state.persons[2].age} />\n          </div> : null\n          }\n      </div>\n    );\n    // return React.createElement('div', {className: 'App'}, React.createElement('h1', null, 'Does this work now?'));\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}